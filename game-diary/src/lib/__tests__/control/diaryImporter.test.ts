/**
 * @jest-environment jsdom
 */
import 'reflect-metadata';
import DiaryImporter from '@/control/controlDiary/diaryImporter';
import type { IDiaryImport } from '@/model/repository/diaryRepositoryInterfaces';
import type { ICurrentDiaryAccessor } from '@/control/controlDiary/controlDiaryInterface';
import fs from 'fs';

describe('DiaryImporter - importText', () => {
  let mockDiaryImport: jest.Mocked<IDiaryImport>;
  let mockDiaryAccessor: jest.Mocked<ICurrentDiaryAccessor>;
  let diaryImporter: DiaryImporter;

  beforeEach(() => {
    mockDiaryImport = {
      import: jest.fn(),
    };

    mockDiaryAccessor = {
      setCurrentDiary: jest.fn(),
    } as unknown as jest.Mocked<ICurrentDiaryAccessor>;

    diaryImporter = new DiaryImporter(mockDiaryImport, mockDiaryAccessor);
  });

  it('should call diaryImport.import with the provided value', () => {
    const input = 'test diary content';
    const key = 'generated-key';

    mockDiaryImport.import.mockReturnValue(key);

    const result = diaryImporter.importText(input);

    expect(mockDiaryImport.import).toHaveBeenCalledWith(input);
    expect(mockDiaryAccessor.setCurrentDiary).toHaveBeenCalledWith(key);
    expect(result).toBe(key);
  });

  it('should return the key generated by diaryImport.import', async () => {
    const fileString = fs.readFileSync('/app/testFileV1.txt', 'utf8');
    const file = new File([fileString], 'testFileV1.txt');
    const key = 'generated-key';

    mockDiaryImport.import.mockReturnValue(key);

    const result = await diaryImporter.importFile(file);

    expect(mockDiaryImport.import).toHaveBeenCalledWith(fileString);
    expect(mockDiaryAccessor.setCurrentDiary).toHaveBeenCalledWith(key);
    expect(result).toBe(key);
  });
});
