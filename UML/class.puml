@startuml class
package Diary{
  class Diary{
    report: Map<day,DiaryEntry>
    settings: Settings
    currentDay: number
    createNewDiary(): number
    getSettings(): Settings\n\t直接アクセスなのでこの戻り値を編集すると本体も編集される
  }
  class DiaryEntryBuilder{
    constructor(source: DiaryEntryBuilderDiaryEntry, settings: Settings)
    constructor(\n\tday: number = 1,\n\treportTitle: string = "",\n\treport: string = "",\n\tprevious?: number,\n\tnext?: number\n)
    constructor(a: any,b: any,c: string?,d: number?,e: number?)
    built(): DiaryEntry
  }
  Diary -l- DiaryEntryBuilder
  DiaryEntryBuilder -- DiaryEntry
  class DiaryEntry{
    day: number
    reportTitle: string
    report: string
    constructor(day: number)
    setDiaryTitle(string): void
    setDiary(string): void
    getDay(): number
    getDiaryTitle(): string
    getDiary(): string
  }

  class Settings{
    storageKey: string
    version: number
    diaryName: string
    dayInterval: number
    dayModifier: DayModifier
    constructor(storageKey,version,diaryName,dayInterval,dayModifier)
    setDiaryName(string): void
    getDiaryName(): string
    setDayInterval(number): void
    getDayInterval(): number
    setDayModifier(unit: string): void
    setDayModifier(cycleIndex: number,unit: string): void
    setDayModifier(a: any, b: string): void
    getDayModifier(index: number): string | null
    setDayModifierCycle(cycleLength: number): void
    getDayModifierCycle(): number

    getNextDay(day: number): number
    getModifierDay(day: number)string
  }
  Diary *-- DiaryEntry
  Diary -- Settings
  Settings -- DayModifier
  class DayModifier{
    constructor(cycleLength: number,...unit: string)
    constructor(unit: string)
    constructor(a: any,...b: string)
    modifyDay(naturalDay: number): string
    getDayModifier(): Array<string>
    getDayModifierCycle(): number
  }
  class DiaryManager{
    reportsList: Array<Diary>
    addDiary(): void
    selectDiary(strageKey: string): void
    deleteDiary(strageKey: string): void
  }
  DiaryManager *-- Diary
}
package ControlDiaryEntry{
  class CreateDiaryEntry{
    createDiaryEntry(source: DayDiary, DiaryEntrys: Diary)
  }
  class ChengeCurrentDiaryEntry{
    DiaryEntrys: Diary
    toNextDay(): number
    toEveDay(): number
    toThisDay(day: number): number
  }
  ChengeCurrentDiaryEntry -- CreateDiaryEntry
  ChengeCurrentDiaryEntry -- Diary.Diary
}
package View{
  class DiaryList{
    addDiary(day: number, title: string): void
    turnOverThis(day: number): void
    deleteDiary(day: number): void
  }
  class DiaryView{
    editDiary(string): void
    clearDiary(): void
    turnOverNext(): void
    turnOverBefore(): void
  }
  class SettingsView{
    editDiaryName(string): void
    editDayInterval(number): void
    editDayModifier(string): void
    editDayModifierCycle(number): void
    addNewDiary(string): void
    selectDiary(string): void
    deleteDiary(string): void
  }
  DiaryList -- CreateDiaryEntry : CreateDiaryEntry側から\nDiaryList.addDiaryを呼ぶ。
  DiaryList -- ChengeCurrentDiaryEntry
  DiaryView -- DiaryEntry
  DiaryView -- Diary
  SettingsView -- Settings
  SettingsView -- DiaryManager


}
@enduml